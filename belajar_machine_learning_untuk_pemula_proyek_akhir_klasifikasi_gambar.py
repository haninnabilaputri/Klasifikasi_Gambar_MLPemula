# -*- coding: utf-8 -*-
"""Belajar Machine Learning untuk Pemula - Proyek Akhir : Klasifikasi Gambar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fOUI3iL1fwrFB2vANrn7mflDZ6lPXVJM

Hanin Nabila Putri

Proyek Akhir : Klasifikasi Gambar

Belajar Machine Learning untuk Pemula

Dicoding Indonesia
"""

import tensorflow as tf
print(tf.__version__)

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rock_paper_scissors.zip

import zipfile,os
local_zip = '/tmp/rock_paper_scissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/rockpaperscissors/rps-cv-images'

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.utils.np_utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, Activation
from tensorflow.keras.callbacks import Callback
from tensorflow.keras.callbacks import LearningRateScheduler
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 20,
    horizontal_flip = True,
    vertical_flip = True,
    shear_range = 0.2,
    validation_split = 0.4,
    height_shift_range = 0.2,
    width_shift_range = 0.2,
    zoom_range = 0.2,
    fill_mode = 'wrap',
    brightness_range=[0.2,1.5])

training_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size = (200, 200),
    batch_size = 32,
    class_mode = 'categorical',
    subset = 'training')

validation_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size = (200, 200),
    batch_size = 32,
    class_mode = 'categorical',
    subset = 'validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (200, 200, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(256, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation = 'relu'),
    tf.keras.layers.Dense(3, activation = 'softmax')
])

model.summary()

model.compile(loss = 'categorical_crossentropy',
              optimizer = tf.optimizers.Adam(),
              metrics = ['accuracy'])

def scheduler(epoch, lr):
  if epoch < 5:
    return lr
  else:
    return lr * tf.math.exp(-0.1)

lr_schedule = tf.keras.callbacks.LearningRateScheduler(scheduler, verbose = 2)
tb_callback = tf.keras.callbacks.TensorBoard(log_dir='logs', histogram_freq = 0,
                                             write_graph = True, write_images = False,
                                             update_freq = 'epoch', embeddings_freq = 0,
                                             embeddings_metadata=None)

model.summary()

history = model.fit(
    training_generator,
    steps_per_epoch = 1314 // 32,
    epochs = 10,
    validation_data = validation_generator,
    validation_steps = 874 // 32,
    verbose = 2,
    callbacks = [lr_schedule, tb_callback]
)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():
  path = fn
  img = image.load_img(path, target_size=(200, 200))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)
  images = np.vstack([x])
  classes = model.predict(images, batch_size = 32)
  print(fn)
  if classes[0][0] == 1:
    print("Kertas")
  elif classes[0][1] == 1:
    print("Batu")
  else:
    print("Gunting")

